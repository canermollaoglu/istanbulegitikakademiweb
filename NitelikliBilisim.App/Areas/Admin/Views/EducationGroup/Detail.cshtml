@model NitelikliBilisim.Core.ViewModels.areas.admin.education_groups.GroupDetailVm
@{
    ViewData["Title"] = "Grup Aç";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link href="~/css/sup/alert-sup.css" rel="stylesheet" />
    <link href="~/vendor\devextreme\dist\css\dx.common.css" rel="stylesheet" />
    <link href="~/vendor\devextreme\dist\css\dx.light.css" rel="stylesheet" />
    <style>
        .form-check-label {
            cursor: pointer;
        }
    </style>
}
@section alerts{
    <partial name="partials/_Alert" />
}

<div class="panel-group">

    <!--Genel Grup Bilgileri-->
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-list"></i> <strong></strong> Genel Grup Bilgileri
                </div>
                <input type="hidden" value="@Model.GroupId" id="groupId" />
                <div class="card-body">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <td>
                                    <b>Grup Adı</b>
                                </td>
                                <td>
                                    @Model.GroupName
                                </td>

                                <td>
                                    <b>Eğitim Yeri</b>
                                </td>
                                <td>
                                    @Model.Host.HostName
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Eğitim</b>
                                </td>
                                <td>
                                    @Model.Education.Name
                                </td>
                                <td>
                                    <b>Sınıf</b>
                                </td>
                                <td>
                                    @Model.ClassRoomName
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Eğitmen</b>
                                </td>
                                <td>
                                    @Model.EducatorName
                                </td>
                                <td>
                                    <b>Başlangıç Tarihi</b>
                                </td>
                                <td>
                                    @Model.StartDate.GetValueOrDefault().ToShortDateString()
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>



    <!--Kayıtlı Öğrenciler-->
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-users"></i> Öğrenci Listesi
                    <button type="button" title="Öğrenci Ataması Yap" data-toggle="modal" data-target="#addStudent" class="btn btn-outline-primary btn-sm pull-right" style="margin:0;">Öğrenci Ata</button>
                </div>
                <div class="card-body">
                    <div id="grid-students"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <!--Grup Giderleri-->
        <div class="col-md-12">
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-money"></i> Grup Giderleri
                    <button type="button" data-toggle="modal" data-target="#addGroupExpenseModal" class="btn btn-outline-primary btn-sm pull-right">Gider Ekle </button>
                </div>
                <div class="card-body">
                    <div id="grid-expenses"></div>
                </div>

            </div>
        </div>
    </div>
    <div class="row">
        <!--Eğitim Günleri-->
        <div class="col-md-12">
            <div class="card mb-3">
                <div class="card-header">
                    <i class="fa fa-calendar"></i> Eğitim Günleri
                </div>
                <div class="card-body">
                    <div id="grid-lessonDays"></div>
                </div>
            </div>

        </div>
    </div>
</div>


<div class="modal fade" id="addGroupExpenseModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Grup Gideri Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="form-add-groupexpense">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="col-form-label">Gider Tipi : </label>
                                <select class="form-control" id="selectExpenseType">
                                    @foreach (var item in Model.GroupExpenseTypes)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="col-form-label">Adet</label>
                                <input type="number" class="form-control" id="inputCount" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="col-form-label">Birim Fiyat : </label>
                                <input type="number" class="form-control" id="inputPrice" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="col-form-label">Açıklama : </label>
                                <textarea type="text" class="form-control" id="inputDescription"></textarea>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btn-save">Kaydet</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="addStudent" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Grup Gideri Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-hover" id="dataTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>İsim</th>
                                <th>Soyisim</th>
                                <th>İşlem</th>
                            </tr>
                        </thead>
                        <tbody id="tbody-tickets">
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

@section postScripts{
    <script src="~/assets/js/area-admin/jquery.dataTables.js"></script>
    <script src="~/assets/js/area-admin/dataTables.bootstrap4.js"></script>
    <script src="~/js/sup/alert-sup.js"></script>
    <script src="~/js/lib/security-support.js"></script>
    <script src="~/vendor\devextreme\dist\js\dx.all.js"></script>
    <script type="text/javascript">
        /* elements */
        var selectExpenseTypes = $("#selectExpenseType");
        var inputPrice = $("#inputPrice");
        var inputCount = $("#inputCount");
        var inputDescription = $("#inputDescription");
        var groupExpensesDiv = $("#groupExpensesDiv");
        var groupId = $("#groupId");
        var btnSave = $("#btn-save");
        var tbodyTickets = $("#tbody-tickets");
        /* fields */
        var confirmModalBuilder = new AlertSupport.ConfirmModalBuilder();

        /* assignments */
        $(document).ready(document_onLoad);
        btnSave.on("click", btnSave_onClick);

        /* events */
        function document_onLoad() {
            confirmModalBuilder.buildModal({
                title: "Emin misiniz?",
                bodyText: "Seçmiş olduğunuz kayıt kalıcı olarak silinecektir.",
                cancelText: "Hayır, iptal et",
                confirmText: "Evet, eminim",
                onConfirmClick: confirm_onClick
            });

            createGroupExpenseGrid();
            createStudentGrid();
            createLessonDayGrid();
            createEligibleTicketTable();
        }
        function btnConfirmationModalTrigger_onClick() {
            var url = this.getAttribute("data-url");
            confirmModalBuilder.setUrl(url);
            confirmModalBuilder.display();
        }
        function btnSave_onClick() {
            btnSave.off("click");

            var tokenVerifier = new SecuritySupport.TokenVerifier();
            var data = tokenVerifier.addToken("form-add-groupexpense", {
                GroupId: groupId.val(),
                Description: inputDescription.val(),
                Price: inputPrice.val(),
                Count: inputCount.val(),
                ExpenseTypeId: selectExpenseTypes.val()
            });
            var resultAlert = new AlertSupport.ResultAlert();
            $.ajax({
                url: "/admin/add-group-expense",
                method: "post",
                data: data,
                success: (res) => {
                    if (res.isSuccess) {
                        resultAlert.display({
                            success: true,
                            message: "Kayıt işlemi başarılı!",
                        });
                    } else {
                        resultAlert.display({
                            success: false,
                            errors: res.errors,
                            message: "İşlem başarısız"
                        });
                    }
                    $('#form-add-groupexpense')[0].reset();
                    $("#addGroupExpenseModal").modal('hide');
                },
                complete: () => {
                    btnSave.on("click", btnSave_onClick);
                }
            });
            location.href = location.href;
        }
        function confirm_onClick() {
            var url = this.getAttribute("data-url");
            $.ajax({
                url: url,
                method: "get",
                success: (res) => {
                    if (res.isSuccess) {
                        location.href = location.href;
                    } else {
                        var resultAlert = new AlertSupport.ResultAlert();
                        resultAlert.display({
                            success: false,
                            errors: res.errors,
                            message: "Hataları düzeltiniz"
                        });
                    }
                }
            });
        }
        function btnUnassign_onClick() {
            var ticketId = this.getAttribute("data-ticket-id");
            $.ajax({
                url: "/admin/unassign-ticket",
                method: "post",
                data: {
                    TicketId: ticketId
                },
                success: (res) => { location.href = location.href; }
            });
        }
        function btnAssign_onClick() {
            var ticketId = this.getAttribute("data-ticket-id");
            var gId = groupId.val();
            $.ajax({
                url: "/admin/assign-ticket",
                method: "post",
                data: {
                    TicketId: ticketId,
                    GroupId: gId
                },
                success: (res) => { location.href = location.href; }
            });
        }
        function createEligibleTicketTable() {
            var gId = groupId.val();
            $.ajax({
                url: `/admin/get-eligible-student/${gId}`,
                method: "get",
                success: (res) => {
                    if (res.isSuccess) {
                        tbodyTickets.html("");
                        var eligibleTickets = res.data;
                        var eligibleAppend = "";
                        if (eligibleTickets.length != 0)
                            for (var i = 0; i < eligibleTickets.length; i++) {
                                var item = eligibleTickets[i];
                                eligibleAppend += "<tr>" +
                                    `<td>${item.customerName}</td>` +
                                    `<td>${item.customerSurname}</td>` +
                                    `<td><button class="btn btn-sm btn-success btn-assign" data-ticket-id="${item.ticketId}"> Gruba Ata</button></td>` +
                                    "<tr>";
                            }
                        else
                            eligibleAppend = `<tr><td colspan="3">Gruba atanabilecek öğrenci yoktur</td></tr>`;
                        tbodyTickets.append(eligibleAppend);
                        createAssignmentButtons();
                    }
                }
            });
        }
        function createAssignmentButtons() {
            var btnAssings = document.getElementsByClassName("btn-assign");
            for (var i = 0; i < btnAssings.length; i++) {
                var btn = btnAssings[i];
                btn.onclick = btnAssign_onClick;
            }
        };


        /*DataGrid*/
        function createGroupExpenseGrid() {
            var gId = groupId.val();
            $("#grid-expenses").dxDataGrid({
                dataSource: `/admin/educationgroup/GetGroupExpensesByGroupId?groupId=${gId}`,
                showBorders: true,
                showColumnLines: true,
                showRowLines: true,
                filterRow: {
                    visible: true,
                    applyFilter: "auto"
                },
                searchPanel: {
                    visible: false
                },
                paging: {
                    pageSize: 10
                },
                onContentReady: function () {
                    var deleteButtons = $(".btn-confirmation-modal-trigger");
                    for (var i = 0; i < deleteButtons.length; i++) {
                        var btn = deleteButtons[i];
                        btn.onclick = btnConfirmationModalTrigger_onClick;
                    }
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [5, 10, 20],
                    showInfo: true
                },
                columns: [{
                    caption: "Tarih",
                    dataField: "createdDate",
                    width: 100,
                    dataType: 'date',
                    format: 'dd/MM/yyyy'
                },
                {
                    caption: "Gider Tipi",
                    dataField: "expenseTypeName",
                    width: 200
                },
                {
                    caption: "Açıklama",
                    dataField: "description",
                    width: 450

                },
                {
                    caption: "Adet",
                    dataField: "count",
                    alignment: "center",
                },
                {
                    caption: "Tutar",
                    dataField: "price",
                    customizeText: function (price) {
                        return price.value + " ₺";
                    },
                    alignment: "center"
                },
                {
                    caption: "Toplam",
                    dataField: "totalPrice",
                    customizeText: function (totalPrice) {
                        return totalPrice.value + " ₺";
                    },
                    alignment: "center"
                },
                {
                    caption: "İşlem",
                    allowSearch: false,
                    cellTemplate: function (container, options) {
                        var current = options.data;
                        $(`<button type="button" title="Gideri Sil" class="btn btn-outline-danger btn-sm btn-confirmation-modal-trigger" data-url="/admin/delete-group-expense?expenseId=${current.id}" > Sil</button>`)
                            .appendTo(container);
                    },
                    alignment: "center",
                    width: "auto"
                }
                ],
                summary: {
                    totalItems: [
                        {
                            column: "expenseTypeName",
                            summaryType: "count",
                            displayFormat: "Adet: {0}",
                        },
                        {
                            column: "totalPrice",
                            summaryType: "sum",
                            displayFormat: "{0} ₺"
                        }]
                }
            });
        }
        function createLessonDayGrid() {
            var gId = groupId.val();
            $("#grid-lessonDays").dxDataGrid({
                dataSource: `/admin/educationgroup/GetLessonDaysByGroupId?groupId=${gId}`,
                showBorders: true,
                showColumnLines: true,
                showRowLines: true,
                filterRow: {
                    visible: true,
                    applyFilter: "auto"
                },
                searchPanel: {
                    visible: false
                },
                paging: {
                    pageSize: 10
                },
                onContentReady: function () {
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [5, 10, 20],
                    showInfo: true
                },
                columns: [{
                    caption: "Tarih",
                    dataField: "dateOfLesson",
                    width: 100,
                    dataType: 'date',
                    format: 'dd/MM/yyyy'
                },
                {
                    caption: "Eğitmen",
                    dataField: "educatorFullName",
                    width: 150
                },
                {
                    caption: "Sınıf",
                    dataField: "classRoomName"

                },
                {
                    caption: "Eğitmen Ücreti",
                    dataField: "educatorSalary",
                    customizeText: function (price) {
                        return price.value + " ₺";
                    },
                    alignment: "center"
                },
                {
                    caption: "Yoklama Alındı Mı?",
                    cellTemplate: function (container, options) {
                        var current = options.data;
                        if (current.hasAttendanceRecord) {
                            $(`<span class="text-success"><i class="fa fa-check-circle"></i></span>`)
                                .appendTo(container);
                        } else {
                            $(`<span class="text-danger"><i class="fa fa-times-circle"></i></span>`)
                                .appendTo(container);
                        }
                    },
                    alignment: "center",
                    width: 150
                },
                {
                    caption: "Yoklama",
                    allowSearch: false,
                    cellTemplate: function (container, options) {
                        var current = options.data;
                        console.log(current);
                        $(`<a class="btn btn-outline-primary btn-sm" href="/admin/yoklama-girisi/${gId}/${current.dateOfLesson}/${current.hasAttendanceRecord}"">Yoklama</a>`)
                            .appendTo(container);
                        $(`<a class="btn btn-outline-primary btn-sm" href="/admin/egitim-gunu-guncelle/${current.id}">Düzenle</a>`)
                            .appendTo(container);
                    },
                    alignment: "center",
                    width: "auto"
                }
                ],
                summary: {
                    totalItems: [
                        {
                            column: "educatorSalary",
                            summaryType: "sum",
                            displayFormat: "{0} ₺"
                        }]
                }
            });

        }
        function createStudentGrid() {
            var gId = groupId.val();
            $("#grid-students").dxDataGrid({
                dataSource: `/admin/educationgroup/AssignedUserByGroupId?groupId=${gId}`,
                showBorders: true,
                showColumnLines: true,
                showRowLines: true,
                searchPanel: {
                    visible: true,
                    placeholder: "Ara..."
                },
                paging: {
                    pageSize: 10
                },
                onContentReady: function () {
                    var deleteButtons = $(".btn-confirmation-modal-trigger");
                    for (var i = 0; i < deleteButtons.length; i++) {
                        var btn = deleteButtons[i];
                        btn.onclick = btnConfirmationModalTrigger_onClick;
                    }
                    var btnUnassings = document.getElementsByClassName("btn-unassign");
                    for (var i = 0; i < btnUnassings.length; i++) {
                        var btn = btnUnassings[i];
                        btn.onclick = btnUnassign_onClick;
                    }
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [5, 10, 20],
                    showInfo: true
                },
                columns: [{
                    caption: "Ad Soyad",
                    dataField: "customerFullName",
                    width: 200
                },
                {
                    caption: "Email",
                    dataField: "email",
                    width: 250
                },
                {
                    caption: "Telefon",
                    dataField: "phoneNumber",
                    width: 150

                },
                {
                    caption: "Meslek",
                    dataField: "job"
                },
                {
                    caption: "NBUY Öğrencisi Mi?",
                    cellTemplate: function (container, options) {
                        var current = options.data;
                        if (current.isNbuyStudent) {
                            $(`<span class="text-success"><i class="fa fa-check-circle"></i></span>`)
                                .appendTo(container);
                        } else {
                            $(`<span class="text-danger"><i class="fa fa-times-circle"></i></span>`)
                                .appendTo(container);
                        }
                    },
                    alignment: "center",

                },
                {
                    caption: "Devamsızlık",
                    dataField: "nonAttendance",
                    customizeText: function (price) {
                        return price.value > 0 ? price.value + " Gün" : "Yok";
                    },
                    alignment: "center"
                },
                {
                    caption: "İşlem",
                    allowSearch: false,
                    cellTemplate: function (container, options) {
                        var current = options.data;
                        $(`<button type="button" title="Gruptan Çıkar" class="btn btn-outline-danger btn-sm btn-unassign" data-ticket-id="${current.ticketId}" > Çıkar</button>`)
                            .appendTo(container);
                    },
                    alignment: "center",
                    width: "auto"
                }
                ]
            });

        }
    </script>
}